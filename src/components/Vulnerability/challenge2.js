import React from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { dark } from "react-syntax-highlighter/dist/esm/styles/prism";
import "./challenge1.css";

const Challenge2 = () => {
  const vulnerableCode = `
const express = require('express');
const mysql = require('mysql');
const app = express();

// Database connection
const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'userdb'
});

app.get('/user', (req, res) => {
    // Vulnerability: Direct user input in SQL query
    const userId = req.query.id;
    
    // Vulnerable query - susceptible to SQL injection
    const query = 'SELECT * FROM users WHERE id = ' + userId;
    
    connection.query(query, (error, results) => {
        if (error) throw error;
        res.json(results);
    });
});

// Example vulnerable search endpoint
app.get('/search', (req, res) => {
    const searchTerm = req.query.term;
    
    // Another vulnerable query - SQL injection possible
    const query = "SELECT * FROM products WHERE name LIKE '%" + searchTerm + "%'";
    
    connection.query(query, (error, results) => {
        if (error) throw error;
        res.json(results);
    });
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});
  `;

  return (
    <div className="challenge1-container">
      <h1>Challenge 2: SQL Injection</h1>
      <p>
        In this challenge, you need to identify and fix SQL injection vulnerabilities 
        in a Node.js/Express application. The code contains multiple vulnerable 
        endpoints that are susceptible to SQL injection attacks.
      </p>
      <div className="instructions">
        <h2>Instructions:</h2>
        <ul>
          <li>Analyze the code and identify the SQL injection vulnerabilities.</li>
          <li>Understand how these vulnerabilities could be exploited.</li>
          <li>Implement proper input sanitization and parameterized queries.</li>
          <li>Test the fixed code with various malicious inputs.</li>
        </ul>
      </div>
      <div className="code-section">
        <h2>Vulnerable Code:</h2>
        <SyntaxHighlighter language="javascript" style={dark}>
          {vulnerableCode}
        </SyntaxHighlighter>
      </div>
      <div className="hints">
        <h2>Example Attack Vectors:</h2>
        <ul>
          <li>Try: <code>id=1 OR 1=1</code> - This might return all users</li>
          <li>Try: <code>term=x' OR '1'='1</code> - This might return all products</li>
          <li>Try: <code>id=1; DROP TABLE users--</code> - This could delete the users table</li>
        </ul>
      </div>
    </div>
  );
};

export default Challenge2;